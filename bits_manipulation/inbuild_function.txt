  Number of leading zeroes: builtin_clz(x)
  Number of trailing zeroes : builtin_ctz(x)
  Number of 1-bits: __builtin_popcount(x) 





1=>The Quickest way to swap two numbers: 
a ^= b;
b ^= a; 
a ^= b;



2=>Simple approach to flip the bits of a number: It can be done in a simple way, just simply subtract the number from the value obtained when all the bits are equal to 1. 
For example: 
 
Number : Given Number
Value  : A number with all bits set in given number.
Flipped number = Value â€“ Number.

Example : 
Number = 23,
Binary form: 10111;
After flipping digits number will be: 01000;
Value: 11111 = 31;=>2^5-1



3=>We can find the most significant set bit in O(1) time for a fixed size integer. For example below code is for 32-bit integer. 
 
int setBitNumber(int n)
{     
    // Below steps set bits after
    // MSB (including MSB)
 
    // Suppose n is 273 (binary
    // is 100010001). It does following
    // 100010001 | 010001000 = 110011001
    n |= n>>1;
 
    // This makes sure 4 bits
    // (From MSB and including MSB)
    // are set. It does following
    // 110011001 | 001100110 = 111111111
    n |= n>>2;  
 
    n |= n>>4; 
    n |= n>>8;
    n |= n>>16;
     
    // Increment n by 1 so that
    // there is only one set bit
    // which is just before original
    // MSB. n now becomes 1000000000
    n = n + 1;
 
    // Return original MSB after shifting.
    // n now becomes 100000000
    return (n >> 1);
}